const fs = require('fs');
const filePath = process.platform === 'linux' ? '/dev/stdin' : '9464.txt';
const input = fs.readFileSync(filePath).toString().trim().split('\n');

const N = +input.shift().trim();
const arr = input.map(Number);
const vec = [
  7, 24, 47, 78, 119, 166, 215, 286, 359, 438, 527, 624, 727, 840, 959, 1078,
  1205, 1342, 1493, 1654, 1815, 1982, 2173, 2366, 2565, 2782, 2999, 3222, 3455,
  3694, 3935, 4192, 4455, 4726, 5007, 5294, 5581, 5870, 6181, 6494, 6823, 7152,
  7489, 7832, 8185, 8544, 8911, 9294, 9685, 10076, 10477, 10886, 11317, 11750,
  12189, 12638, 13095, 13558, 14037, 14524, 15021, 15518, 16021, 16532, 17043,
  17564, 18091, 18618, 19147, 19700, 20253, 20822, 21399, 21992, 22591, 23192,
  23799, 24416, 25039, 25662, 26293, 26934, 27581, 28254, 28933, 29612, 30309,
  31006, 31719, 32432, 33151, 33872, 34593, 35320, 36063, 36814, 37575, 38344,
  39135, 39926, 40725, 41524, 42333, 43156, 43989, 44822, 45661, 46518, 47381,
  48262, 49149, 50038, 50927, 51838, 52757, 53686, 54623, 55566, 56509, 57462,
  58421, 59380, 60341, 61308, 62285, 63268, 64259, 65268, 66299, 67332, 68371,
  69420, 70477, 71534, 72597, 73678, 74759, 75846, 76943, 78046, 79173, 80300,
  81429, 82580, 83733, 84902, 86071, 87264, 88465, 89672, 90879, 92096, 93319,
  94550, 95791, 97032, 98281, 99552, 100823, 102102, 103391, 104688, 105991,
  107310, 108631, 109958, 111295, 112632, 113975, 115318, 116669, 118020,
  119381, 120748, 122141, 123534, 124933, 126342, 127765, 129198, 130637,
  132084, 133541, 134998, 136469, 137950, 139437, 140926, 142437, 143950,
  145463, 146982, 148501, 150044, 151597, 153156, 154717, 156278, 157845,
  159428, 161029, 162636, 164245, 165876, 167507, 169140, 170773, 172422,
  174071, 175728, 177391, 179064, 180737, 182416, 184095, 185776, 187463,
  189150, 190847, 192568, 194319, 196070, 197823, 199582, 201359, 203142,
  204941, 206740, 208541, 210358, 212175, 213998, 215829, 217670, 219511,
  221358, 223229, 225102, 226981, 228870, 230767, 232664, 234577, 236498,
  238419, 240346, 242273, 244224, 246191, 248158, 250151, 252150, 254159,
  256168, 258185, 260208, 262231, 264270, 266317, 268364, 270427, 272508,
  274595, 276684, 278795, 280908, 283037, 285174, 287317, 289470, 291629,
  293788, 295949, 298126, 300303, 302494, 304685, 306886, 309087, 311294,
  313503, 315734, 317965, 320204, 322467, 324730, 327003, 329284, 331571,
  333868, 336171, 338474, 340785, 343114, 345443, 347794, 350153, 352512,
  354881, 357250, 359627, 362010, 364403, 366802, 369203, 371620, 374043,
  376484, 378931, 381380, 383829, 386300, 388771, 391244, 393747, 396260,
  398773, 401294, 403837, 406388, 408955, 411522, 414091, 416660, 419251,
  421844, 424443, 427042, 429651, 432268, 434901, 437548, 440205, 442868,
  445539, 448220, 450901, 453588, 456277, 458988, 461701, 464420, 467149,
  469886, 472623, 475360, 478097, 480850, 483609, 486368, 489135, 491912,
  494703, 497504, 500311, 503118, 505951, 508790, 511629, 514486, 517349,
  520212, 523091, 525978, 528875, 531778, 534689, 537600, 540521, 543442,
  546369, 549322, 552291, 555284, 558277, 561276, 564277, 567284, 570291,
  573308, 576325, 579348, 582379, 585410, 588451, 591500, 594573, 597646,
  600725, 603814, 606933, 610054, 613191, 616334, 619477, 622628, 625779,
  628946, 632115, 635306, 638499, 641692, 644891, 648090, 651299, 654516,
  657755, 660994, 664235, 667476, 670723, 673970, 677227, 680498, 683779,
  687060, 690373, 693692, 697021, 700358, 703695, 707038, 710391, 713744,
  717103, 720464, 723847, 727230, 730621, 734028, 737437, 740846, 744277,
  747708, 751141, 754590, 758047, 761510, 764983, 768456, 771935, 775414,
  778917, 782420, 785931, 789452, 792973, 796500, 800029, 803588, 807165,
  810742, 814325, 817918, 821525, 825142, 828765, 832396, 836043, 839690,
  843339, 846988, 850659, 854332, 858021, 861710, 865399, 869088, 872785,
  876488, 880191, 883904, 887617, 891336, 895063, 898824, 902591, 906360,
  910151, 913942, 917735, 921558, 925391, 929232, 933073, 936920, 940783,
  944654, 948525, 952406, 956295, 960206, 964125, 968054, 971991, 975928,
  979871, 983832, 987793, 991760, 995737, 999714, 1003697, 1007680, 1011681,
  1015688, 1019727, 1023766, 1027815, 1031872, 1035935, 1039998, 1044071,
  1048150, 1052247, 1056344, 1060455, 1064582, 1068711, 1072862, 1077013,
  1081166, 1085325, 1089502, 1093685, 1097868, 1102061, 1106254, 1110455,
  1114662, 1118869, 1123086, 1127309, 1131532, 1135763, 1140004, 1144251,
  1148498, 1152747, 1156996, 1161267, 1165540, 1169829, 1174126, 1178445,
  1182764, 1187091, 1191428, 1195789, 1200150, 1204519, 1208888, 1213279,
  1217672, 1222065, 1226474, 1230891, 1235308, 1239731, 1244170, 1248609,
  1253050, 1257497, 1261954, 1266417, 1270888, 1275359, 1279840, 1284327,
  1288814, 1293327, 1297846, 1302375, 1306904, 1311463, 1316022, 1320583,
  1325150, 1329727, 1334304, 1338887, 1343478, 1348085, 1352692, 1357325,
  1361958, 1366597, 1371246, 1375903, 1380566, 1385239, 1389918, 1394599,
  1399280, 1403983, 1408694, 1413405, 1418126, 1422855, 1427606, 1432359,
  1437112, 1441871, 1446648, 1451425, 1456208, 1461001, 1465800, 1470601,
  1475418, 1480249, 1485090, 1489931, 1494802, 1499681, 1504560, 1509439,
  1514318, 1519207, 1524110, 1529023, 1533942, 1538879, 1543822, 1548773,
  1553740, 1558709, 1563700, 1568691, 1573682, 1578673, 1583666, 1588665,
];

// function gcd(a, b) {
//   if (b > a) [a, b] = [b, a];
//   let r;
//   while (b !== 0) {
//     r = a % b;
//     a = b;
//     b = r;
//   }
//   return a;
// }

// let map = Array(10000).fill(0);

// function findMaxRectangles(L) {
//   let maxRectangles = 0;
//   let variable = L;
//   for (let x = 2; x * x < L; x++) {
//     for (let y = 1; y < x; y++) {
//       let a = 2 * x * y;
//       let b = x * x - y * y;
//       let c = a ** 2 + b ** 2;

//       let perimeter = 2 * (a + b);
//       if (perimeter > variable) break;
//       if (variable <= 0) break;

//       if (gcd(a, gcd(c, b)) === 1) {
//         map[perimeter]++;
//         variable = variable - perimeter;
//         maxRectangles++;
//       }
//     }
//     if (variable <= 0) break;
//   }

//   return maxRectangles;
// }

// findMaxRectangles(1250000);

// let gorean = {};
// let k = 0;
// let sum = 0;
// for (let i = 0; i < map.length; i++) {
//   if (map[i] > 0) {
//     if (map[i] > 1) {
//       let repeat = map[i];
//       while (repeat-- > 0) {
//         k += i;
//         sum += 1;
//         gorean[k] = sum;
//       }
//     } else if (map[i] === 1) {
//       k += i;
//       sum += 1;
//       gorean[k] = sum;
//     }
//   }
// }
// console.log('ðŸš€ ~ file: 9464.js:62 ~ gorean:', gorean);

const answer = [];
for (let i = 0; i < N; i++) {
  let L = arr[i];
  // let ans = Object.entries(gorean)
  //   .filter(([key, value]) => +key <= L)
  //   .map(([_, value]) => value);
  let idx = binarySearch(Math.floor(L / 2));
  answer.push(idx + 1);
}
// console.log(vec.length);
console.log(answer.join('\n'));

function binarySearch(target) {
  let left = 0;
  let right = vec.length - 1;
  let idx = -1;

  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (vec[mid] <= target) {
      idx = mid;
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  return idx;
}

/* C++ ì •ë‹µì½”ë“œ
int g(int x, int y){
	return y ? g(y, x%y) : x;
}

int main(){
	vector<int> v;
	for(int i=1; i<=10000; i++){
		for(int j=i+1; 2ll * i * j<=10000; j++){
			int a = 2 * i * j;
			int b = j * j - i * i;
			if(g(a, b) == 1){
				v.push_back(2*a+2*b);
			}
		}
	}
	sort(v.begin(), v.end());
	//v.resize(unique(v.begin(), v.end()) - v.begin());
	int t;
	cin >> t;
	while(t--){
		int u;
		scanf("%d",&u);
		for(int i=0; i<v.size(); i++){
			if(u >= v[i]){
				u -= v[i];
			}
			else{
				printf("%d\n",i);
				break;
			}
		}
	}
}
*/
